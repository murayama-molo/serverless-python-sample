service: serverless-python-sample

frameworkVersion: "2"

provider:
  defaultStage: dev
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-northeast-1

custom:
  s3Sync:
    - bucketName: serverless-python-sample-bucket
      localDir: public
      acl: private

resources:
  Resources:
    SampleHostingS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "serverless-python-sample-bucket"
    SampleHostingCloudFrontOriginAccessIdentity:
      DependsOn: SampleHostingS3Bucket
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName
    SampleHostingS3Policy:
      DependsOn: SampleHostingCloudFrontOriginAccessIdentity
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SampleHostingS3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - " "
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                      - Ref: SampleHostingCloudFrontOriginAccessIdentity
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - "/"
                  - - Fn::GetAtt:
                        - SampleHostingS3Bucket
                        - Arn
                    - "*"
    SampleHostingCloudFront:
      DependsOn:
        - SampleHostingS3Policy
        - ApiGatewayRestApi
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: ${sls:stage}環境 Sample Hosting用
          PriceClass: PriceClass_All
          DefaultRootObject: index.html
          HttpVersion: http2
          Origins:
            - Id: S3Origin
              DomainName: serverless-python-sample-bucket.s3.${self:provider.region}.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - "/"
                    - - origin-access-identity/cloudfront
                      - Ref: SampleHostingCloudFrontOriginAccessIdentity
            - Id: APIGateway
              DomainName:
                Fn::Join:
                  - "/"
                  - - Ref: ApiGatewayRestApi
                    - .execute-api.s3.${self:provider.region}.amazonaws.com
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: "http-only"
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            DefaultTTL: 30
            MaxTTL: 120
            MinTTL: 30
            ForwardedValues:
              QueryString: true
            SmoothStreaming: false
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: https-only
          # WebACLId: arn:aws:wafv2:us-east-1:${aws:accountId}:global/webacl/${sls:stage}-SampleWebACL/${self:custom.WebACLId.${sls:stage}}
          # CustomErrorResponses:
          #   - ErrorCode: 403
          #     ErrorCachingMinTTL: 30
          #     ResponsePagePath: /
          #     ResponseCode: 200

  Outputs:
    ApiGatewayRestApi:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-restApiId-${self:provider.stage}

functions:
  hello:
    handler: handler.hello
    name: hello
    description: テストAPI
    timeout: 15
    memorySize: 128
    events:
      - http:
          path: "api/hello"
          method: get
          integration: lambda

plugins:
  - serverless-s3-sync
